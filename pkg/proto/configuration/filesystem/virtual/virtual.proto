syntax = "proto3";

package buildbarn.configuration.filesystem.virtual;

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "pkg/proto/configuration/eviction/eviction.proto";

option go_package = "github.com/buildbarn/bb-remote-execution/pkg/proto/configuration/filesystem/virtual";

message MountConfiguration {
  // Path where the mount needs to be created.
  string mount_path = 1;

  oneof backend {
    // Use the kernel's FUSE driver to expose the mount.
    //
    // This option is supported on Linux. In principle this could be
    // made to work on macOS using the OSXFUSE/macFUSE kernel extension.
    // Unfortunately, this kernel extension contains various bugs that
    // cause system lockups under high load.
    FUSEMountConfiguration fuse = 2;

    // Run an in-process NFSv4 server and use the kernel's NFSv4 client
    // to expose the mount. This option is supported on macOS starting
    // with Ventura 13.3 (22E252), though the use of Sonoma 14.5
    // (23F79) or later is strongly recommended.
    NFSv4MountConfiguration nfsv4 = 3;
  }
}

message FUSEMountConfiguration {
  // The amount of time the kernel is permitted to cache directory
  // entries. When left unset, the kernel is not permitted to cache this
  // data at all, causing it to issue more LOOKUP requests.
  //
  // Because bb_worker is capable of sending NOTIFY_ENTRY messages to
  // the kernel to actively invalidate directory entries, it is
  // generally safe to turn on directory entry caching. For bb_clientd
  // it is also safe to enable this option, as directory contents are
  // immutable. Not all implementations may respect this option.
  //
  // Recommended value: 300s
  google.protobuf.Duration directory_entry_validity = 2;

  // The amount of time the kernel is permitted to cache inode
  // attributes. When left unset, the kernel is not permitted to cache this
  // data at all, causing it to issue more GETATTR requests.
  //
  // Because files placed in the FUSE file system by bb_worker itself
  // are immutable, it is generally safe to turn on inode attribute
  // caching. For bb_clientd it is also safe to enable this option, as
  // files are immutable. Not all implementations may respect this
  // option.
  //
  // Recommended value: 300s
  google.protobuf.Duration inode_attribute_validity = 3;

  // Was 'maximum_dirty_pages_percentage'. Use
  // 'linux_backing_dev_info_tunables' instead.
  reserved 4;

  // Was 'shuffle_directory_listings'. This option has been promoted up to
  // bb_worker's VirtualBuildDirectoryConfiguration.
  reserved 5;

  // Provide the "allow_other" mount option, thereby allowing other
  // users on the system to access the FUSE mount point as well.
  //
  // This option needs to be enabled if bb_worker is configured to use
  // privilege separation, as build actions wouldn't be able to access
  // their build directory otherwise.
  //
  // This option may be useful for bb_clientd in case files need to be
  // accessible to debugging tools that require administrative
  // privileges. Care should be taken that other access controls (e.g.,
  // permissions on parent directories) are in place to prevent
  // unintended access to the mount point.
  bool allow_other = 6;

  // If set, the FUSE mount is created by calling mount() directly, as
  // opposed to invoking the fusermount utility. This option needs to be
  // enabled in environments where the fusermount utility is not
  // available, such as the bb_worker container images.
  bool direct_mount = 7;

  // If set, extract authentication metadata from the "fuse_in_header"
  // messages sent by the kernel. This field contains a JMESPath
  // expression that is used to construct the authentication metadata.
  // The input data will have the following format:
  //
  //     {
  //       "uid": number,
  //       "gid": number,
  //       "pid": number,
  //     }
  //
  // NOTE: This option is only used by bb_virtual_tmp.
  string in_header_authentication_metadata_jmespath_expression = 8;

  // Tunables to apply to the Linux Backing Dev Info (BDI) after the
  // FUSE mount has been created. Setting this option causes the
  // tunables at /sys/class/bdi/${device}/${key} to be modified. These
  // tunables are documented here:
  //
  // https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-bdi
  //
  // By default, Linux only allows 1% of vm.dirty_ratio of memory to be
  // dirty pages belonging to the FUSE mount. This may be insufficient
  // for workloads that depend on random access writes to large files.
  // Increasing this value may speed up writes against the FUSE file
  // system, at the cost of slowing down writes against other volumes.
  // For example, increasing the ratio from 1% to 10% can be
  // accomplished by setting this option as follows:
  //
  //     {
  //       "max_ratio": "10"
  //     }
  //
  // If random access writes against the FUSE file system are still
  // slower than desired, performance may be increased further by
  // removing the BDI_CAP_STRICTLIMIT flag from the FUSE mount. On Linux
  // 6.2 and later, this can be achieved by setting this option as
  // follows:
  //
  //     {
  //       "max_ratio": "10",
  //       "strict_limit": "0"
  //     }
  //
  // Recommended value: unset
  map<string, string> linux_backing_dev_info_tunables = 9;
}

message NFSv4MountConfiguration {
  oneof operating_system {
    // Configuration options specific to mounting the NFSv4 file system
    // on macOS.
    NFSv4DarwinMountConfiguration darwin = 1;
  }

  // The amount of time that needs to pass for the server to close files
  // and remove state belonging to a client that has not shown any
  // activity.
  //
  // This option also controls how long state associated with a single
  // process on a client (an 'open-owner') is allowed to continue to
  // exist on the server if no files are opened, or if left unconfirmed.
  //
  // Recommended value: 120s
  google.protobuf.Duration enforced_lease_time = 2;

  // The lease time to announce to clients through the FATTR4_LEASE_TIME
  // attribute. This option should be set lower than
  // 'enforced_lease_time', as it needs to account for network delays
  // and instability.
  //
  // Recommended value: 60s
  google.protobuf.Duration announced_lease_time = 3;

  // If set, extract the system authentication (AUTH_SYS) data from
  // RPCv2 requests and convert them to authentication metadata. The
  // resulting metadata can be used for purposes such as authorization.
  //
  // Please refer to RFC 5531, appendix A for more details.
  //
  // NOTE: This option is only used by bb_virtual_tmp.
  RPCv2SystemAuthenticationConfiguration system_authentication = 4;

  // The minor version of the protocol to use.
  //
  // When set to 0, the NFS server is expected to conform to NFSv4.0
  // (RFC 7530). When set to 1, the NFS server is expected to conform to
  // NFSv4.1 (RFC 8881). The use of NFSv4.1 is recommended, because it
  // provides better parallelism.
  //
  // When left unset, the latest protocol version is used that is
  // supported by the currently running operating system. In the case of
  // macOS, this is NFSv4.0.
  google.protobuf.UInt32Value minor_version = 5;
}

message NFSv4DarwinMountConfiguration {
  // Path on which to bind the UNIX socket of the NFSv4 server. The
  // kernel will connect to this socket when mounting.
  //
  // NOTE: No facilities are provided to set the ownership or
  // permissions on the socket file. On most operating systems, the
  // socket file will have mode 0777. How the mode is interpreted when
  // changed is inconsistent between operating systems. Some require the
  // socket to be writable in order to connect, while others ignore the
  // permissions altogether.
  //
  // It is therefore strongly advised that socket files are placed
  // inside directories that have access controls set up properly.
  string socket_path = 1;

  // Was 'minimum_directories_attribute_cache_timeout' and
  // 'maximum_directories_attribute_cache_timeout'. These options are
  // now set automatically, based on the application that is used.
  reserved 2, 3;

  // If set, adjust the size of the cache of ACCESS operation results
  // that is tracked for each vnode (i.e., kernel file object).
  //
  // By default, the kernel will cache the results of ACCESS operations
  // for up to three different users. This is sufficient for workloads
  // where all build actions run as the same user. However, when
  // privilege separation is performed, the cache of the build
  // directory's root vnode may get exhausted constantly. This leads to
  // an elevated number of ACCESS operations issued by the client.
  //
  // Setting this option to a value that is greater or equal to the
  // number of distinct user IDs performing builds prevents this from
  // happening, at the cost of slightly increasing the memory footprint
  // of each vnode in the file system.
  //
  // Please refer to the 'accesscache' option in the mount_nfs(8) manual
  // page for more details.
  uint32 access_cache_size = 4;
}

message RPCv2SystemAuthenticationConfiguration {
  // The JMESPath expression to be used to construct authentication
  // metadata. The expression receives the following input, which
  // corresponds to the authsys_parms structure that is described in RFC
  // 5531, appendix A.
  //
  //     {
  //       "stamp": number,
  //       "machinename": string,
  //       "uid": number,
  //       "gid": number,
  //       "gids": list<number>,
  //     }
  string metadata_jmespath_expression = 1;

  // The number of authentication metadata objects to cache. This cache
  // allows clients to use authentication flavor AUTH_SHORT in
  // subsequent requests, meaning they don't need to transmit full
  // credentials as part of every request.
  //
  // It is recommended that this cache is sized proportionally to the
  // number of UNIX users accessing the server.
  int32 maximum_cache_size = 2;

  // The cache replacement policy that should be applied. It is advised
  // that this is set to LEAST_RECENTLY_USED.
  buildbarn.configuration.eviction.CacheReplacementPolicy
      cache_replacement_policy = 3;
}
