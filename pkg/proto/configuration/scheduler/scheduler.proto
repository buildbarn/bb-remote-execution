syntax = "proto3";

package buildbarn.configuration.scheduler;

import "build/bazel/remote/execution/v2/remote_execution.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/buildbarn/bb-remote-execution/pkg/proto/configuration/scheduler";

message ActionRouterConfiguration {
  oneof kind {
    // Let all incoming execution requests use the same method for
    // extracting platform properties and invocation key, and let them
    // all use the same initial size class analyzer.
    SimpleActionRouterConfiguration simple = 1;

    // Demultiplex incoming requests based on the client-provided REv2
    // instance name prefix and platform properties.
    DemultiplexingActionRouterConfiguration demultiplexing = 2;
  }
}

message SimpleActionRouterConfiguration {
  // The method that is used to extract platform properties from an
  // incoming execution request. This can either read them from just the
  // Action message (REv2.2 or later), both the Action and Command
  // message (all versions of REv2), or ignore the client provided
  // platform properties by overriding them.
  PlatformKeyExtractorConfiguration platform_key_extractor = 1;

  // The method that is used to extract an invocation key from an
  // incoming execution requests. The scheduler uses invocation keys to
  // group queued actions, ensuring that actions are scheduled fairly
  // with respect to other groups.
  //
  // The recommended method is to group actions by the
  // 'tool_invocation_id' field that is part of the client provided
  // RequestMetadata. This ensures that every running Bazel build
  // receives an equal number of workers.
  //
  // For more advanced setups it may be advised to write your own
  // implementation that, for example, extracts usernames from
  // authentication tokens. This ensures that every user receives an
  // equal number of workers.
  //
  // By leaving this field empty, all actions are grouped together in a
  // single queue, meaning there is no fairness. When multiple elements
  // are provided, fairness is provided on multiple levels. For example,
  // one can enforce fairness at the user level, followed by fairness at
  // the Bazel invocation ID level.
  repeated InvocationKeyExtractorConfiguration invocation_key_extractors = 2;

  // The initial size class analyzer that is used. The initial size
  // class analyzer is responsible for determining the size of the
  // worker on which an action should run, and what its execution
  // timeout should be.
  //
  // For simpler setups that don't use multiple size classes (i.e., all
  // workers have the same size), this field is still required, as a
  // default and maximum execution timeout must be set.
  InitialSizeClassAnalyzerConfiguration initial_size_class_analyzer = 3;
}

message DemultiplexingActionRouterConfiguration {
  message Backend {
    // The instance name prefix to match.
    string instance_name_prefix = 1;

    // The platform properties to match.
    build.bazel.remote.execution.v2.Platform platform = 2;

    // The action router to which routing requests are forwarded.
    ActionRouterConfiguration action_router = 3;
  }

  // The method that is used to extract platform properties from the
  // incoming execution request.
  PlatformKeyExtractorConfiguration platform_key_extractor = 1;

  // List of backends to which to forward requests if the instance name
  // prefix and platform properties match.
  repeated Backend backends = 2;

  // The backend to which to forward requests if none of the declared
  // backends have matching instance name prefixes and platform
  // properties.
  ActionRouterConfiguration default_action_router = 3;
}

message PlatformKeyExtractorConfiguration {
  oneof kind {
    // Attempt to extract platform properties from the REv2 Action
    // message.
    //
    // This is sufficient when exclusively dealing with clients that
    // implement REv2.2 or later, such as Bazel 4.1.0 and later.
    google.protobuf.Empty action = 1;

    // Attempt to extract platform properties from the REv2 Action
    // message, and fall back to the Command message in case the Action
    // message contains no platform properties.
    //
    // This is less efficient than only considering the Action message,
    // but allows requests from clients that implement REv2.1 or earlier
    // to be respected as well.
    google.protobuf.Empty action_and_command = 2;

    // Do not respect platform properties from the client's request, but
    // use a static value provided in configuration.
    //
    // This option can be used in combination with
    // DemultiplexingActionRouter to rewrite platform properties on
    // incoming requests. This is useful when older platforms are phased
    // out, and best effort support is provided by directing requests to
    // workers of a newer similar platform.
    build.bazel.remote.execution.v2.Platform static = 3;
  }
}

message InvocationKeyExtractorConfiguration {
  // Was 'empty'. The same behavior can now be achieved by leaving the
  // 'invocation_key_extractors' list empty.
  reserved 1;

  oneof kind {
    // Use the 'tool_invocation_id' that the client provided as part of
    // the RequestMetadata message as the invocation key. In the case of
    // Bazel, this causes all actions belonging to the same Bazel
    // invocation to be grouped together.
    google.protobuf.Empty tool_invocation_id = 2;

    // Use the 'correlated_invocations_id' that the client provided as
    // part of the RequestMetadata message as the invocation key. In the
    // case of Bazel, this causes all actions belonging to instances of
    // Bazel that were invoked with the same --build_request_id to be
    // grouped together.
    google.protobuf.Empty correlated_invocations_id = 3;
  }
}

message InitialSizeClassAnalyzerConfiguration {
  // Execution timeout that needs to be applied in case the build action
  // contains no explicit timeout.
  google.protobuf.Duration default_execution_timeout = 1;

  // Maximum permitted execution timeout.
  google.protobuf.Duration maximum_execution_timeout = 2;

  // When not set, run all actions on the smallest size class for which
  // workers exist. Upon failure, retry actions on the largest size
  // class. This mode is not recommended for setups with more than two
  // size classes, or workloads where build times matter.
  oneof kind {

    // Run all actions on the largest size class if not seen before.
    // Future invocations of actions with the same command line arguments
    // and environment variables will run on all size classes, using
    // probabilities based on how their execution times compare to those
    // of the largest size class.
    //
    // Statistics on execution times are persisted into the Initial Size
    // Class Cache (ISCC). bb_browser is also capable of reading data
    // from this data store, making it possible to view these statistics
    // by visiting the page of an action. Because of this, enabling this
    // option requires that bb_scheduler's 'initial_size_class_cache'
    // option is set as well.
    InitialSizeClassFeedbackDrivenAnalyzerConfiguration feedback_driven = 3;

    // Use a platform key to explicitly specify what size class to use
    // for an action.
    OverridingSizeClassAnalyzerConfiguration overriding = 4;
  }
}

message InitialSizeClassFeedbackDrivenAnalyzerConfiguration {
  // Immediately schedule actions on the largest size class if they have
  // failed at least once within the provided timeframe.
  //
  // Actions that fail on any size class other than the largest will
  // always be retried on the largest size class to rule out failures
  // caused by a lack of resources. This means that if an action is
  // known to fail, attempting to run it on smaller size classes causes
  // unnecessary delays in error reporting.
  //
  // During iterative development, it is likely that the same action
  // action is invoked repeatedly, each time having a high probability
  // of failure. This option controls how long these kinds of actions
  // should receive a boost, allowing them to be run on the largest size
  // class and fail quickly.
  //
  // Recommended value: 86400s (1 day)
  google.protobuf.Duration failure_cache_duration = 1;

  // An exponent to determine whether an increase in execution time when
  // scheduling an action on a smaller size class is considere
  // acceptable.
  //
  // For example, consider the case where this exponent is set to 0.7,
  // and a given action is known to have a 60s median execution time on
  // the largest workers, having size class 16. For the execution time
  // to be considered being acceptable on a smaller size class, this
  // action must complete within:
  //
  // - 60s*(16/1)^0.7 = 417.8s on a worker with size class 1,
  // - 60s*(16/2)^0.7 = 257.2s on a worker with size class 2,
  // - 60s*(16/4)^0.7 = 158.3s on a worker with size class 4,
  // - 60s*(16/8)^0.7 =  97.7s on a worker with size class 8.
  //
  // Whereas if this exponent is set to 0.3, the acceptable execution
  // times would be significantly lower:
  //
  // - 60s*(16/1)^0.3 = 137.8s on a worker with size class 1,
  // - 60s*(16/2)^0.3 = 112.0s on a worker with size class 2,
  // - 60s*(16/4)^0.3 =  90.9s on a worker with size class 4,
  // - 60s*(16/8)^0.3 =  73.9s on a worker with size class 8.
  //
  // In effect, this exponent determines how much speed you are willing
  // to sacrifice for increased worker utilization. Setting this
  // exponent to a higher value will increase worker utilization, but
  // may cause actions that are only somewhat parallel to run slower.
  //
  // Recommended value: somewhere between 0.2 and 0.8.
  double acceptable_execution_time_increase_exponent = 2;

  // Actions scheduled on smaller size classes are run with a reduced
  // timeout value that is based on the acceptable execution time of the
  // action for that size class (see above). This ensures that if a
  // misprediction is made and an action is running unacceptably slow on
  // a size class that is too small, it is terminated and quickly
  // retried on the largest size class.
  //
  // This option configures a multiplier that needs to be applied when
  // computing the action's timeout. Setting it to >1.0 gives an action
  // a bit more time to finish its work, even if its execution time has
  // become unacceptable. This has two advantages:
  //
  // - Less work is wasted, as the action may likely still complete.
  // - If we still observe a timeout on the smaller size class, we
  //   insert a higher quality data point into the ISCC.
  //
  // Recommended value: 1.5
  double smaller_size_class_execution_timeout_multiplier = 3;

  // The execution timeout value that is used on smaller size classes is
  // proportional to the median execution time observed on the largest
  // size class. This means that if the median execution time on the
  // largest size class is in the milliseconds, so will be the execution
  // timeout on smaller size classes.
  //
  // Because this tends to introduce too much flakiness, this option can
  // be used to set an lower bound on the execution timeout.
  //
  // Recommended value: 10s
  google.protobuf.Duration minimum_execution_timeout = 4;

  // This implementation compares previous execution stats between every
  // pair of size classes. The resulting scores are stored in a
  // stochastic matrix, of which the resulting eigenvector contains the
  // probabilities at which size classes should be chosen. This
  // algorithm has a strong resemblance with PageRank.
  //
  // To compute the eigenvector, a process called "power iteration" is
  // used, in which repeated matrix multiplications are performed. This
  // method approximates the eigenvector, each iteration giving more
  // accurate results. This option can be used to control how many
  // iterations should be performed. Matrix multiplication will be
  // terminated as soon as the maximum observed error drops below a
  // certain value.
  //
  // It is generally possible to set this option to an aggressive (low)
  // value, for a couple of reasons:
  //
  // - The number of size classes tends to be small (<10), meaning that
  //   the resulting probability matrix is also not too big (<10x10).
  // - The probability function used to populate the stochastic matrix
  //   is total and asymmetric, meaning that every iteration strongly
  //   contributes to convergence.
  // - Probabilities of previous executions of the same action are
  //   cached in the Initial Size Class Cache (ISCC), meaning that
  //   the algorithm often has a good starting point.
  //
  // Still, it is recommended to inspect Prometheus metrics
  // buildbarn_builder_page_rank_strategy_calculator_* in case changes
  // are made to this option to assess the performance impact.
  //
  // Recommended value: 0.002
  double maximum_convergence_error = 5;

  // The number of action outcomes to store per size class. Increasing
  // this improves the accuracy of timing information that is captured,
  // but has the downside that the system responds to changes in
  // behavior of actions less quickly.
  //
  // To ensure that the system does not end up in a steady state where
  // actions are always run on the same size class, there is roughly a
  // 1.0 / history_size probability that actions are run on sizes
  // classes other than the optimum, regardless of historical outcomes.
  //
  // Recommended value: 32
  int32 history_size = 6;
}

message OverridingSizeClassAnalyzerConfiguration {
  // The SizeClassAnalyzer to use when the specific platform key named
  // below is not present.  If this is not provided, every action must
  // specify the size class to use in its platform properties.
  InitialSizeClassAnalyzerConfiguration base = 1;

  // The name of the platform property to look at to determine how to
  // size this invocation.  If the value of this property is 'max', the
  // largest available size class is used.  If the value is 'min', the
  // smallest available size class is used.  Any other value will be
  // interpreted as a number indicating the specific size class to use.
  // If the size class is not available, an error is returned.  If the
  // platform key is not present in an Action, delegates to 'base' to
  // determine how to size the invocation.
  string platform_key = 2;
}
