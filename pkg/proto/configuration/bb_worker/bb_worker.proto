syntax = "proto3";

package buildbarn.configuration.bb_worker;

import "build/bazel/remote/execution/v2/remote_execution.proto";
import "google/protobuf/duration.proto";
import "pkg/proto/configuration/blobstore/blobstore.proto";
import "pkg/proto/configuration/eviction/eviction.proto";
import "pkg/proto/configuration/global/global.proto";
import "pkg/proto/configuration/grpc/grpc.proto";

option go_package = "github.com/buildbarn/bb-remote-execution/pkg/proto/configuration/bb_worker";

message ApplicationConfiguration {
  // Configuration for blob storage.
  buildbarn.configuration.blobstore.BlobstoreConfiguration blobstore = 1;

  // URL of the Buildbarn Browser, shown to the user upon build completion.
  string browser_url = 2;

  // Maximum Protobuf message size to unmarshal.
  int64 maximum_message_size_bytes = 6;

  // Endpoint of the scheduler to which to connect.
  buildbarn.configuration.grpc.ClientConfiguration scheduler = 8;

  // Address on which to listen to expose Prometheus metrics.
  string http_listen_address = 9;

  // Maximum number of directory listings to keep in memory.
  uint64 maximum_memory_cached_directories = 12;

  // Instance name that needs to be reported to the scheduler.
  string instance_name = 16;

  // Directory where temporary files generated by build actions may be
  // stored. If left empty, temporary files are stored in memory.
  string file_pool_directory_path = 18;

  // Common configuration options that apply to all Buildbarn binaries.
  buildbarn.configuration.global.Configuration global = 19;

  // Directories on the system in which builds take place.
  repeated BuildDirectoryConfiguration build_directories = 20;
}

message BuildDirectoryConfiguration {
  oneof backend {
    // Perform builds in a native directory on the system. The advantage
    // of this setup is that build actions can run with little overhead.
    // The disadvantage is that build actions with large input roots may
    // take long to initialize.
    NativeBuildDirectoryConfiguration native = 1;
  }

  // Runners to which to send requests to invoke build action commands.
  repeated RunnerConfiguration runners = 3;
}

message NativeBuildDirectoryConfiguration {
  // Directory where builds take place.
  string build_directory_path = 1;

  // Directory where build input files are cached.
  string cache_directory_path = 2;

  // Maximum number of files in the cache.
  uint64 maximum_cache_file_count = 3;

  // Maximum total size of the cache in bytes.
  int64 maximum_cache_size_bytes = 4;

  // The cache replacement policy to use for the input file cache. For
  // most setups, it is advised that RANDOM_REPLACEMENT is used, for the
  // reason that it still performs adequately in worst-case scenarios.
  //
  // There are certain workloads that may require the use of
  // LEAST_RECENTLY_USED. For example, Clang's implementation of
  // '#pragma once' requires that identical source files exposed under
  // different paths have identical inode numbers. The
  // RANDOM_REPLACEMENT algorithm cannot guarantee this property, while
  // LEAST_RECENTLY_USED can, assuming the cache size is sufficient.
  buildbarn.configuration.eviction.CacheReplacementPolicy
      cache_replacement_policy = 5;
}

message RunnerConfiguration {
  // GRPC endpoint to which to connect.
  buildbarn.configuration.grpc.ClientConfiguration endpoint = 1;

  // Number of actions to run concurrently on this runner.
  uint64 concurrency = 2;

  // Platform properties that need to be reported to the scheduler.
  build.bazel.remote.execution.v2.Platform platform = 3;

  // Execution timeout that needs to be applied in case the build action
  // contains no explicit timeout.
  google.protobuf.Duration default_execution_timeout = 4;

  // Maximum permitted execution timeout.
  google.protobuf.Duration maximum_execution_timeout = 5;

  // Maximum number of temporary files that may be generated by build
  // actions during execution.
  int64 maximum_file_pool_file_count = 6;

  // Maximum total size of all temporary files that may be generated by
  // build actions during execution.
  int64 maximum_file_pool_size_bytes = 7;

  // Additional fields that need to be attached to the ID of the worker,
  // as announced to the scheduler. In addition to the labels specified,
  // one named "thread" is added automatically in case concurrency > 1.
  map<string, string> worker_id = 8;

  // Device nodes to install in input root.
  // e.g. ["null", "zero", "random"]
  repeated string input_root_character_device_nodes = 9;
}
