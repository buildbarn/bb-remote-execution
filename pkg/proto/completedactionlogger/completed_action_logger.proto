syntax = "proto3";

package buildbarn.completedactionlogger;

import "build/bazel/remote/execution/v2/remote_execution.proto";
import "github.com/buildbarn/bb-remote-execution/pkg/proto/cas/cas.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/buildbarn/bb-remote-execution/pkg/proto/completedactionlogger";

// CompletedActionLogger provides a way for streaming completed build actions
// and their associated metadata to an external service in real time. This is
// primarily useful for analyzing or aggregating actions and determining how
// they may relate to each build invocation.
service CompletedActionLogger {
  // Send a CompletedAction to another service as soon as a build action has
  // completed. Receiving a message from the return stream indicates that the
  // service successfully received the CompletedAction.
  rpc LogCompletedActions(stream CompletedAction)
      returns (stream google.protobuf.Empty);
}

// CompletedAction wraps a finished build action in order to transmit to
// an external service.
message CompletedAction {
  // A wrapper around the action's digest and REv2 ActionResult, which contains
  // the action's associated metadata.
  buildbarn.cas.HistoricalExecuteResponse historical_execute_response = 1;

  // A unique identifier associated with the CompletedAction, which is
  // generated by the build executor. This provides a means by which the
  // external logging service may be able to deduplicate incoming
  // CompletedActions. The usage of this field is left to the external
  // logging service to determine.
  string uuid = 2;

  // The REv2 instance name of the remote cluster that workers are returning
  // the action result from.
  string instance_name = 3;

  // The digest function that was used to compute the action digest.
  build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 4;
}
