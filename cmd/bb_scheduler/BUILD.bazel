load("@com_github_buildbarn_bb_storage//tools:container.bzl", "container_push_official")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "bb_scheduler_lib",
    srcs = [
        "build_queue_state_service.go",
        "main.go",
    ],
    embedsrcs = [
        "stylesheet.css",
        "templates/error.html",
        "templates/footer.html",
        "templates/get_build_queue_state.html",
        "templates/get_operation_state.html",
        "templates/header.html",
        "templates/list_drain_state.html",
        "templates/list_operation_state.html",
        "templates/list_queued_operation_state.html",
        "templates/list_worker_state.html",
        "templates/size_class_queue_info.html",
        "templates/invocation_info.html",
        "templates/list_invocation_child_state.html",
    ],
    importpath = "github.com/buildbarn/bb-remote-execution/cmd/bb_scheduler",
    visibility = ["//visibility:private"],
    deps = [
        "//pkg/blobstore",
        "//pkg/cloud/aws",
        "//pkg/proto/buildqueuestate",
        "//pkg/proto/configuration/bb_scheduler",
        "//pkg/proto/remoteworker",
        "//pkg/scheduler",
        "//pkg/scheduler/initialsizeclass",
        "//pkg/scheduler/routing",
        "//pkg/util",
        "@com_github_aws_aws_sdk_go_v2_service_autoscaling//:autoscaling",
        "@com_github_aws_aws_sdk_go_v2_service_sqs//:sqs",
        "@com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:execution",
        "@com_github_buildbarn_bb_storage//pkg/auth",
        "@com_github_buildbarn_bb_storage//pkg/blobstore/configuration",
        "@com_github_buildbarn_bb_storage//pkg/capabilities",
        "@com_github_buildbarn_bb_storage//pkg/clock",
        "@com_github_buildbarn_bb_storage//pkg/cloud/aws",
        "@com_github_buildbarn_bb_storage//pkg/digest",
        "@com_github_buildbarn_bb_storage//pkg/global",
        "@com_github_buildbarn_bb_storage//pkg/grpc",
        "@com_github_buildbarn_bb_storage//pkg/http",
        "@com_github_buildbarn_bb_storage//pkg/program",
        "@com_github_buildbarn_bb_storage//pkg/proto/iscc",
        "@com_github_buildbarn_bb_storage//pkg/random",
        "@com_github_buildbarn_bb_storage//pkg/util",
        "@com_github_google_uuid//:uuid",
        "@com_github_gorilla_mux//:mux",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//encoding/protojson",
        "@org_golang_google_protobuf//types/known/anypb",
        "@org_golang_google_protobuf//types/known/emptypb",
        "@org_golang_google_protobuf//types/known/timestamppb",
    ],
)

filegroup(
    name = "templates",
    srcs = glob(["templates/*.html"]),
)

# Create a copy of Bootstrap that only contains the style attributes
# used by the HTML templates.
genrule(
    name = "stylesheet",
    srcs = [
        "@com_github_twbs_bootstrap//:css/bootstrap.min.css",
        ":templates",
    ],
    outs = ["stylesheet.css"],
    cmd = "$(location @npm//purgecss/bin:purgecss) --css $(location @com_github_twbs_bootstrap//:css/bootstrap.min.css) --content $(locations templates) --output $@",
    tools = ["@npm//purgecss/bin:purgecss"],
)

go_binary(
    name = "bb_scheduler",
    embed = [":bb_scheduler_lib"],
    pure = "on",
    visibility = ["//visibility:public"],
)

go_image(
    name = "bb_scheduler_container",
    embed = [":bb_scheduler_lib"],
    pure = "on",
    visibility = ["//visibility:public"],
)

container_push_official(
    name = "bb_scheduler_container_push",
    component = "bb-scheduler",
    image = ":bb_scheduler_container",
)
