diff --git language/go/generate.go language/go/generate.go
index 9e3ed9a..af460a1 100644
--- language/go/generate.go
+++ language/go/generate.go
@@ -594,7 +594,7 @@ func (g *generator) generateLib(pkg *goPackage, embeds []string) *rule.Rule {
 	} else {
 		visibility = g.commonVisibility(pkg.importPath)
 	}
-	g.setCommonAttrs(goLibrary, pkg.rel, visibility, pkg.library, embeds)
+	g.setCommonAttrs(goLibrary, pkg.rel, visibility, pkg.library, embeds, true)
 	g.setImportAttrs(goLibrary, pkg.importPath)
 	return goLibrary
 }
@@ -623,7 +623,7 @@ func (g *generator) generateBin(pkg *goPackage, library string) *rule.Rule {
 		return goBinary // empty
 	}
 	visibility := g.commonVisibility(pkg.importPath)
-	g.setCommonAttrs(goBinary, pkg.rel, visibility, pkg.binary, []string{library})
+	g.setCommonAttrs(goBinary, pkg.rel, visibility, pkg.binary, []string{library}, true)
 	return goBinary
 }
 
@@ -665,7 +665,7 @@ func (g *generator) generateTests(pkg *goPackage, library string) []*rule.Rule {
 				embeds = append(embeds, library)
 			}
 		}
-		g.setCommonAttrs(goTest, pkg.rel, nil, test, embeds)
+		g.setCommonAttrs(goTest, pkg.rel, nil, test, embeds, false)
 		if pkg.hasTestdata {
 			goTest.SetAttr("data", rule.GlobValue{Patterns: []string{"testdata/**"}})
 		}
@@ -718,9 +718,13 @@ func (g *generator) maybeGenerateExtraLib(lib *rule.Rule, pkg *goPackage) *rule.
 	return r
 }
 
-func (g *generator) setCommonAttrs(r *rule.Rule, pkgRel string, visibility []string, target goTarget, embeds []string) {
+func (g *generator) setCommonAttrs(r *rule.Rule, pkgRel string, visibility []string, target goTarget, embeds []string, flattenSrcs bool) {
 	if !target.sources.isEmpty() {
-		r.SetAttr("srcs", target.sources.buildFlat())
+		if flattenSrcs {
+			r.SetAttr("srcs", target.sources.buildFlat())
+		} else {
+			r.SetAttr("srcs", target.sources.build())
+		}
 	}
 	if !target.embedSrcs.isEmpty() {
 		r.SetAttr("embedsrcs", target.embedSrcs.build())
