diff --git fs/api.go fs/api.go
index 4f4fe92..08a2772 100644
--- fs/api.go
+++ fs/api.go
@@ -603,7 +603,7 @@ type Options struct {
 
 	// ServerCallbacks can be provided to stub out notification
 	// functions for testing a filesystem without mounting it.
-	ServerCallbacks ServerCallbacks
+	ServerCallbacks fuse.ServerCallbacks
 
 	// Logger is a sink for diagnostic messages. Diagnostic
 	// messages are printed under conditions where we cannot
diff --git fs/bridge.go fs/bridge.go
index a747018..94b341a 100644
--- fs/bridge.go
+++ fs/bridge.go
@@ -43,21 +43,10 @@ type fileEntry struct {
 	wg sync.WaitGroup
 }
 
-// ServerCallbacks are calls into the kernel to manipulate the inode,
-// entry and page cache.  They are stubbed so filesystems can be
-// unittested without mounting them.
-type ServerCallbacks interface {
-	DeleteNotify(parent uint64, child uint64, name string) fuse.Status
-	EntryNotify(parent uint64, name string) fuse.Status
-	InodeNotify(node uint64, off int64, length int64) fuse.Status
-	InodeRetrieveCache(node uint64, offset int64, dest []byte) (n int, st fuse.Status)
-	InodeNotifyStoreCache(node uint64, offset int64, data []byte) fuse.Status
-}
-
 type rawBridge struct {
 	options Options
 	root    *Inode
-	server  ServerCallbacks
+	server  fuse.ServerCallbacks
 
 	// mu protects the following data.  Locks for inodes must be
 	// taken before rawBridge.mu
@@ -1100,7 +1089,7 @@ func (b *rawBridge) StatFs(cancel <-chan struct{}, input *fuse.InHeader, out *fu
 	return fuse.OK
 }
 
-func (b *rawBridge) Init(s *fuse.Server) {
+func (b *rawBridge) Init(s fuse.ServerCallbacks) {
 	b.server = s
 }
 
diff --git fuse/api.go fuse/api.go
index 433e5ff..93027b3 100644
--- fuse/api.go
+++ fuse/api.go
@@ -236,6 +236,17 @@ type MountOptions struct {
 	DisableReadDirPlus bool
 }
 
+// ServerCallbacks are calls into the kernel to manipulate the inode,
+// entry and page cache.  They are stubbed so filesystems can be
+// unittested without mounting them.
+type ServerCallbacks interface {
+	DeleteNotify(parent uint64, child uint64, name string) Status
+	EntryNotify(parent uint64, name string) Status
+	InodeNotify(node uint64, off int64, length int64) Status
+	InodeRetrieveCache(node uint64, offset int64, dest []byte) (n int, st Status)
+	InodeNotifyStoreCache(node uint64, offset int64, data []byte) Status
+}
+
 // RawFileSystem is an interface close to the FUSE wire protocol.
 //
 // Unless you really know what you are doing, you should not implement
@@ -346,5 +357,5 @@ type RawFileSystem interface {
 	// This is called on processing the first request. The
 	// filesystem implementation can use the server argument to
 	// talk back to the kernel (through notify methods).
-	Init(*Server)
+	Init(ServerCallbacks)
 }
diff --git fuse/defaultraw.go fuse/defaultraw.go
index edb0629..3f30e00 100644
--- fuse/defaultraw.go
+++ fuse/defaultraw.go
@@ -16,7 +16,7 @@ func NewDefaultRawFileSystem() RawFileSystem {
 
 type defaultRawFileSystem struct{}
 
-func (fs *defaultRawFileSystem) Init(*Server) {
+func (fs *defaultRawFileSystem) Init(ServerCallbacks) {
 }
 
 func (fs *defaultRawFileSystem) String() string {
diff --git fuse/nodefs/fsconnector.go fuse/nodefs/fsconnector.go
index 25945ff..351b802 100644
--- fuse/nodefs/fsconnector.go
+++ fuse/nodefs/fsconnector.go
@@ -29,7 +29,7 @@ type FileSystemConnector struct {
 	debug bool
 
 	// Callbacks for talking back to the kernel.
-	server *fuse.Server
+	server fuse.ServerCallbacks
 
 	// Translate between uint64 handles and *Inode.
 	inodeMap handleMap
@@ -81,7 +81,7 @@ func NewFileSystemConnector(root Node, opts *Options) (c *FileSystemConnector) {
 }
 
 // Server returns the fuse.Server that talking to the kernel.
-func (c *FileSystemConnector) Server() *fuse.Server {
+func (c *FileSystemConnector) Server() fuse.ServerCallbacks {
 	return c.server
 }
 
diff --git fuse/nodefs/fsops.go fuse/nodefs/fsops.go
index f89a74a..bafc489 100644
--- fuse/nodefs/fsops.go
+++ fuse/nodefs/fsops.go
@@ -56,7 +56,7 @@ func (c *rawBridge) String() string {
 	return name
 }
 
-func (c *rawBridge) Init(s *fuse.Server) {
+func (c *rawBridge) Init(s fuse.ServerCallbacks) {
 	c.server = s
 	c.rootNode.Node().OnMount((*FileSystemConnector)(c))
 }
