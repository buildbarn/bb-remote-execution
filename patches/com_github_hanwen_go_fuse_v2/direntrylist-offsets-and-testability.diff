diff --git fs/bridge.go fs/bridge.go
index a292067..a747018 100644
--- fs/bridge.go
+++ fs/bridge.go
@@ -978,7 +978,7 @@ func (b *rawBridge) getStream(ctx context.Context, inode *Inode) (DirStream, sys
 	return NewListDirStream(r), 0
 }
 
-func (b *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *fuse.DirEntryList) fuse.Status {
+func (b *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out fuse.ReadDirEntryList) fuse.Status {
 	n, f := b.inode(input.NodeId, input.Fh)
 
 	f.mu.Lock()
@@ -993,7 +993,7 @@ func (b *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *fus
 
 	if f.hasOverflow {
 		// always succeeds.
-		out.AddDirEntry(f.overflow)
+		out.AddDirEntry(f.overflow, f.dirOffset+1)
 		f.hasOverflow = false
 		f.dirOffset++
 	}
@@ -1004,7 +1004,7 @@ func (b *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *fus
 		if errno != 0 {
 			return errnoToStatus(errno)
 		}
-		if !out.AddDirEntry(e) {
+		if !out.AddDirEntry(e, f.dirOffset+1) {
 			f.overflow = e
 			f.hasOverflow = true
 			return errnoToStatus(errno)
@@ -1015,7 +1015,7 @@ func (b *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *fus
 	return fuse.OK
 }
 
-func (b *rawBridge) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out *fuse.DirEntryList) fuse.Status {
+func (b *rawBridge) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out fuse.ReadDirPlusEntryList) fuse.Status {
 	n, f := b.inode(input.NodeId, input.Fh)
 
 	f.mu.Lock()
@@ -1044,7 +1044,7 @@ func (b *rawBridge) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out
 			return errnoToStatus(errno)
 		}
 
-		entryOut := out.AddDirLookupEntry(e)
+		entryOut := out.AddDirLookupEntry(e, f.dirOffset+1)
 		if entryOut == nil {
 			f.overflow = e
 			f.hasOverflow = true
diff --git fuse/api.go fuse/api.go
index a73ad21..433e5ff 100644
--- fuse/api.go
+++ fuse/api.go
@@ -336,8 +336,8 @@ type RawFileSystem interface {
 
 	// Directory handling
 	OpenDir(cancel <-chan struct{}, input *OpenIn, out *OpenOut) (status Status)
-	ReadDir(cancel <-chan struct{}, input *ReadIn, out *DirEntryList) Status
-	ReadDirPlus(cancel <-chan struct{}, input *ReadIn, out *DirEntryList) Status
+	ReadDir(cancel <-chan struct{}, input *ReadIn, out ReadDirEntryList) Status
+	ReadDirPlus(cancel <-chan struct{}, input *ReadIn, out ReadDirPlusEntryList) Status
 	ReleaseDir(input *ReleaseIn)
 	FsyncDir(cancel <-chan struct{}, input *FsyncIn) (code Status)
 
diff --git fuse/defaultraw.go fuse/defaultraw.go
index df109bd..edb0629 100644
--- fuse/defaultraw.go
+++ fuse/defaultraw.go
@@ -140,11 +140,11 @@ func (fs *defaultRawFileSystem) Fsync(cancel <-chan struct{}, input *FsyncIn) (c
 	return ENOSYS
 }
 
-func (fs *defaultRawFileSystem) ReadDir(cancel <-chan struct{}, input *ReadIn, l *DirEntryList) Status {
+func (fs *defaultRawFileSystem) ReadDir(cancel <-chan struct{}, input *ReadIn, l ReadDirEntryList) Status {
 	return ENOSYS
 }
 
-func (fs *defaultRawFileSystem) ReadDirPlus(cancel <-chan struct{}, input *ReadIn, l *DirEntryList) Status {
+func (fs *defaultRawFileSystem) ReadDirPlus(cancel <-chan struct{}, input *ReadIn, l ReadDirPlusEntryList) Status {
 	return ENOSYS
 }
 
diff --git fuse/direntry.go fuse/direntry.go
index ee824f1..665a690 100644
--- fuse/direntry.go
+++ fuse/direntry.go
@@ -39,35 +39,28 @@ type DirEntryList struct {
 	buf []byte
 	// capacity of the underlying buffer
 	size int
-	// offset is the requested location in the directory. go-fuse
-	// currently counts in number of directory entries, but this is an
-	// implementation detail and may change in the future.
-	// If `offset` and `fs.fileEntry.dirOffset` disagree, then a
-	// directory seek has taken place.
-	offset uint64
 	// pointer to the last serialized _Dirent. Used by FixMode().
 	lastDirent *_Dirent
 }
 
 // NewDirEntryList creates a DirEntryList with the given data buffer
 // and offset.
-func NewDirEntryList(data []byte, off uint64) *DirEntryList {
+func NewDirEntryList(data []byte) *DirEntryList {
 	return &DirEntryList{
 		buf:    data[:0],
 		size:   len(data),
-		offset: off,
 	}
 }
 
 // AddDirEntry tries to add an entry, and reports whether it
 // succeeded.
-func (l *DirEntryList) AddDirEntry(e DirEntry) bool {
-	return l.Add(0, e.Name, e.Ino, e.Mode)
+func (l *DirEntryList) AddDirEntry(e DirEntry, off uint64) bool {
+	return l.add(0, e.Name, e.Ino, e.Mode, off)
 }
 
 // Add adds a direntry to the DirEntryList, returning whether it
 // succeeded.
-func (l *DirEntryList) Add(prefix int, name string, inode uint64, mode uint32) bool {
+func (l *DirEntryList) add(prefix int, name string, inode uint64, mode uint32, off uint64) bool {
 	if inode == 0 {
 		inode = FUSE_UNKNOWN_INO
 	}
@@ -82,7 +75,7 @@ func (l *DirEntryList) Add(prefix int, name string, inode uint64, mode uint32) b
 	l.buf = l.buf[:newLen]
 	oldLen += prefix
 	dirent := (*_Dirent)(unsafe.Pointer(&l.buf[oldLen]))
-	dirent.Off = l.offset + 1
+	dirent.Off = off
 	dirent.Ino = inode
 	dirent.NameLen = uint32(len(name))
 	dirent.Typ = modeToType(mode)
@@ -94,7 +87,6 @@ func (l *DirEntryList) Add(prefix int, name string, inode uint64, mode uint32) b
 		copy(l.buf[oldLen:], eightPadding[:padding])
 	}
 
-	l.offset = dirent.Off
 	return true
 }
 
@@ -109,10 +101,10 @@ func (l *DirEntryList) Add(prefix int, name string, inode uint64, mode uint32) b
 // 3) Name (null-terminated)
 // 4) Padding to align to 8 bytes
 // [repeat]
-func (l *DirEntryList) AddDirLookupEntry(e DirEntry) *EntryOut {
+func (l *DirEntryList) AddDirLookupEntry(e DirEntry, off uint64) *EntryOut {
 	const entryOutSize = int(unsafe.Sizeof(EntryOut{}))
 	oldLen := len(l.buf)
-	ok := l.Add(entryOutSize, e.Name, e.Ino, e.Mode)
+	ok := l.add(entryOutSize, e.Name, e.Ino, e.Mode, off)
 	if !ok {
 		return nil
 	}
@@ -139,3 +131,13 @@ func (l *DirEntryList) FixMode(mode uint32) {
 func (l *DirEntryList) bytes() []byte {
 	return l.buf
 }
+
+type ReadDirEntryList interface {
+	AddDirEntry(e DirEntry, off uint64) bool
+	FixMode(mode uint32)
+}
+
+type ReadDirPlusEntryList interface {
+	AddDirLookupEntry(e DirEntry, off uint64) *EntryOut
+	FixMode(mode uint32)
+}
diff --git fuse/nodefs/dir.go fuse/nodefs/dir.go
index 75cf75a..5440333 100644
--- fuse/nodefs/dir.go
+++ fuse/nodefs/dir.go
@@ -22,7 +22,7 @@ type connectorDir struct {
 	stream []fuse.DirEntry
 }
 
-func (d *connectorDir) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *fuse.DirEntryList) (code fuse.Status) {
+func (d *connectorDir) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out fuse.ReadDirEntryList) (code fuse.Status) {
 	d.mu.Lock()
 	defer d.mu.Unlock()
 
@@ -54,7 +54,7 @@ func (d *connectorDir) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *
 			log.Printf("got empty directory entry, mode %o.", e.Mode)
 			continue
 		}
-		ok := out.AddDirEntry(e)
+		ok := out.AddDirEntry(e, input.Offset+1)
 		if !ok {
 			break
 		}
@@ -62,7 +62,7 @@ func (d *connectorDir) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *
 	return fuse.OK
 }
 
-func (d *connectorDir) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out *fuse.DirEntryList) (code fuse.Status) {
+func (d *connectorDir) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out fuse.ReadDirPlusEntryList) (code fuse.Status) {
 	d.mu.Lock()
 	defer d.mu.Unlock()
 
@@ -91,7 +91,7 @@ func (d *connectorDir) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, o
 
 		// we have to be sure entry will fit if we try to add
 		// it, or we'll mess up the lookup counts.
-		entryDest := out.AddDirLookupEntry(e)
+		entryDest := out.AddDirLookupEntry(e, input.Offset+1)
 		if entryDest == nil {
 			break
 		}
@@ -108,6 +108,6 @@ func (d *connectorDir) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, o
 }
 
 type rawDir interface {
-	ReadDir(out *fuse.DirEntryList, input *fuse.ReadIn, c *fuse.Context) fuse.Status
-	ReadDirPlus(out *fuse.DirEntryList, input *fuse.ReadIn, c *fuse.Context) fuse.Status
+	ReadDir(out fuse.ReadDirEntryList, input *fuse.ReadIn, c *fuse.Context) fuse.Status
+	ReadDirPlus(out fuse.ReadDirPlusEntryList, input *fuse.ReadIn, c *fuse.Context) fuse.Status
 }
diff --git fuse/nodefs/fsops.go fuse/nodefs/fsops.go
index 58b4a5e..f89a74a 100644
--- fuse/nodefs/fsops.go
+++ fuse/nodefs/fsops.go
@@ -172,13 +172,13 @@ func (c *rawBridge) OpenDir(cancel <-chan struct{}, input *fuse.OpenIn, out *fus
 	return fuse.OK
 }
 
-func (c *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out *fuse.DirEntryList) fuse.Status {
+func (c *rawBridge) ReadDir(cancel <-chan struct{}, input *fuse.ReadIn, out fuse.ReadDirEntryList) fuse.Status {
 	node := c.toInode(input.NodeId)
 	opened := node.mount.getOpenedFile(input.Fh)
 	return opened.dir.ReadDir(cancel, input, out)
 }
 
-func (c *rawBridge) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out *fuse.DirEntryList) fuse.Status {
+func (c *rawBridge) ReadDirPlus(cancel <-chan struct{}, input *fuse.ReadIn, out fuse.ReadDirPlusEntryList) fuse.Status {
 	node := c.toInode(input.NodeId)
 	opened := node.mount.getOpenedFile(input.Fh)
 	return opened.dir.ReadDirPlus(cancel, input, out)
diff --git fuse/opcode.go fuse/opcode.go
index 3505761..ba8008a 100644
--- fuse/opcode.go
+++ fuse/opcode.go
@@ -172,7 +172,7 @@ func doCreate(server *Server, req *request) {
 func doReadDir(server *Server, req *request) {
 	in := (*ReadIn)(req.inData)
 	buf := server.allocOut(req, in.Size)
-	out := NewDirEntryList(buf, uint64(in.Offset))
+	out := NewDirEntryList(buf)
 
 	code := server.fileSystem.ReadDir(req.cancel, in, out)
 	req.flatData = out.bytes()
@@ -182,7 +182,7 @@ func doReadDir(server *Server, req *request) {
 func doReadDirPlus(server *Server, req *request) {
 	in := (*ReadIn)(req.inData)
 	buf := server.allocOut(req, in.Size)
-	out := NewDirEntryList(buf, uint64(in.Offset))
+	out := NewDirEntryList(buf)
 
 	code := server.fileSystem.ReadDirPlus(req.cancel, in, out)
 	req.flatData = out.bytes()
